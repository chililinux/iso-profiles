insmod font
insmod keylayouts
insmod part_msdos
insmod part_gpt

export loaded
export koptsok
export disable_gfxterm
export bootarch
export firmware
export firmware_found
export from
export fromiso
export bootlang
export keyboard
export timezone
export hwclock
export def_bootlang
export def_keyboard
export def_timezone
export menu_color_normal
export menu_color_highlight
export pager

# Carrega variáveis salvas, se existir o arquivo de ambiente
if [ -e ($root)/boot/grub/grubenv ]; then
    load_env ($root)/boot/grub/grubenv
fi

# Valores padrão caso as variáveis ainda não estejam definidas
if [ -z "${graphics_mode}" ]; then
    set txt_graphics_mode=Wayland
    export txt_graphics_mode
        
    set graphics_mode=wayland
    export graphics_mode
fi
if [ -z "${drive_mode}" ]; then
    set txt_drive_mode="Proprietary (Modern Nvidia, Broadcom wl:r8168/rt3562sta)"
    export txt_drive_mode

    set drive_mode=proprietary-drivers
    export drive_mode
fi
if [ -z "${custom}" ]; then
    set custom=Automatic
    export custom
fi
if [ -z "${option_mode}" ]; then
    set txt_option_mode=None
    export txt_option_mode
    
    set option_mode=none
    export option_mode
fi

function reset_defaults {
    set custom=Automatic
    export custom
    save_env custom

    set txt_graphics_mode=Wayland
    export txt_graphics_mode
    save_env txt_graphics_mode
        
    set graphics_mode=wayland
    export graphics_mode
    save_env graphics_mode

    set txt_drive_mode="Proprietary (Modern Nvidia, Broadcom wl:r8168/rt3562sta)"
    export txt_drive_mode
    save_env txt_drive_mode

    set drive_mode=proprietary-drivers
    export drive_mode
    save_env drive_mode
        
    set txt_option_mode=None
    export txt_option_mode
    save_env txt_option_mode
    
    set option_mode=none
    export option_mode
    save_env option_mode
}

function menu_reload {
    configfile ($root)/boot/grub/grub.cfg
}

function is_efi {
    if [ "${grub_platform}" = "efi" ]; then
        return 0
    fi
    return 1
}

function boot_defaults {
    source /boot/grub/defaults.cfg
}

function check {
    cliname="$1"
    varname="$2"
    if [ "${optname}" != "${cliname}" ]; then
        return 1
    fi
    if [ -z "$varname" ]; then
        varname="${cliname}"
    fi
    if [ -z "${optval}" ]; then
        eval ${varname}="${cliname}"
    else
        eval ${varname}="${cliname}=${optval}"
        if [ "${optname}" = "lang" ]; then
            lang_setup ${optval}
        elif [ "${optname}" = "keytable" ]; then
            def_keyboard="${optval}"
        elif [ "${optname}" = "tz" ]; then
            def_timezone="${optval}"
        fi
    fi
    return 0
}

function checkinput {
    newinput="$1"
    newoutput=""
    for newcli in ${newinput} ; do
        optname=""
        optval=""
        optdone=""
        regexp -s optname '^(.+)=.*$' "${newcli}"
        if [ -z "${optname}" ]; then
            optname="${newcli}"
        else
            regexp -s optval '^.+=(.*)$' "${newcli}"
        fi
        for tocheck in "lang bootlang" "keytable keyboard" "tz timezone" "utc hwclock"; do
            if check $tocheck ; then
                optdone="Y"
                break
            fi
        done
        if [ -z "${optdone}" ]; then
            if [ -z "${newoutput}" ]; then
                newoutput="${newcli}"
            else
                newoutput="${newoutput} ${newcli}"
            fi
        fi
    done
}

function new2cli {
    newinput="$1"
    if [ -n "$newinput" ]; then
        checkinput "$newinput"
        if [ -n "${newoutput}" ]; then
            newinput="${newoutput}"
            if [ -n "$clinput" ]; then
                clinput="$clinput $newinput"
            else
                clinput="$newinput"
            fi
            export clinput
        fi
    fi
}

function getargs {
    args=""
    for a in $@; do
        if [ -n "${a}" ]; then
            args="${args} ${a}"
        fi
    done
}

function bootcheck {
    getargs
}

pager=1

insmod regexp
insmod datehook
if ! is_efi; then
    insmod part_gpt
fi

if is_efi; then
    insmod efi_gop
    insmod efi_uga
fi

if [ -z "${loaded}" ]; then
    iscd=""
    auto=""
    regexp -s iscd '^(cd)' "${root}"
    if [ "${iscd}" != "cd" -a -e (cd) ]; then
        probe -s cdp -u cd
        probe -s hdp -u $root
        if [ -n "$cdp" -a "$cdp" = "$hdp" ]; then
            iscd="cd"
        fi
    fi
    if [ "${root}" != "hd96" -a "${iscd}" != "cd" ]; then
        auto="${auto}"
    fi
    source /boot/grub/variable.cfg
    loaded=true

    if [ "${disable_gfxterm}" != "true" ]; then
        if loadfont /boot/grub/unicode.pf2 ; then
            if [ -z "$gfxmode" ] ; then
                gfxmode=1024x768,auto
                gfxpayload=keep
            fi
            insmod efi_gop
            insmod all_video
            insmod efi_uga
            insmod ieee1275_fb
            insmod vbe
            insmod vga
            insmod video_bochs
            insmod video_cirrus
            insmod gfxterm
            if terminal_output --append gfxterm; then
                terminal_output --remove console
            else
                disable_gfxterm=true
            fi
        else
            disable_gfxterm=true
        fi
    fi

    insmod gfxmenu
    insmod jpeg
    insmod png
    theme=($root)/boot/grub/themes/ruscher-live/theme.txt
    export theme

    menu_color_normal=cyan/blue
    menu_color_highlight=white/blue

    if [ -n "${iso_path}" ]; then
        auto="img_dev=/dev/disk/by-uuid/${rootuuid} img_loop=${iso_path}"
    fi
    
    export auto
fi

boot_defaults

for kopt in "${clinput}" "${bootlang}" "${keyboard}" "${timezone}" "${hwclock}" "${auto}"; do
    if [ -n "${kopt}" ]; then
        kopts="${kopts} ${kopt}"
    fi
done
if [ -n "${bootlang}${keyboard}${timezone}" ]; then
    koptsok="true"
fi

### MENU PRINCIPAL E SUBMENUS
function custom_start {
    set custom=Custom
    export custom
    save_env custom
}
function advanced_reset {
    set txt_option_mode=None
    export txt_option_mode
    save_env txt_option_mode
    
    set option_mode=none
    export option_mode
    save_env option_mode
}

# Main Menu
menuentry "Start (${custom})" --class start-menu {
#     if [ "$graphics_mode" = "wayland" ]; then
#         if [ "$drive_mode" = "opensource-drivers" ]; then
#             set gfxpayload=keep
#                if [ "$option_mode" = "None" ]; then
#             linux /boot/vmlinuz-x86_64 misobasedir=manjaro misolabel=BIGLINUXLIVE wayland driver=free nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash
#                else
#             linux /boot/vmlinuz-x86_64 misobasedir=$exe_option_mode
#                fi
#             initrd /boot/amd_ucode.img /boot/intel_ucode.img /boot/initramfs-@ARCH@.img
#         else
#             set gfxpayload=keep
#                if [ "$option_mode" = "None" ]; then
#             linux /boot/vmlinuz-x86_64 misobasedir=manjaro misolabel=BIGLINUXLIVE wayland driver=nonfree nouveau.modeset=0 i915.modeset=1 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash
#                else
#             linux /boot/vmlinuz-x86_64 misobasedir=$exe_option_mode
#                fi
#             initrd /boot/amd_ucode.img /boot/intel_ucode.img /boot/initramfs-@ARCH@.img
#         fi
#     else
#         if [ "$drive_mode" = "opensource-drivers" ]; then
#             set gfxpayload=keep
#                if [ "$option_mode" = "None" ]; then
#             linux /boot/vmlinuz-x86_64 misobasedir=manjaro misolabel=BIGLINUXLIVE driver=free nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash
#                else
#             linux /boot/vmlinuz-x86_64 misobasedir=$exe_option_mode
#                fi
#             initrd /boot/amd_ucode.img /boot/intel_ucode.img /boot/initramfs-@ARCH@.img
#         else
#             set gfxpayload=keep
#                if [ "$option_mode" = "None" ]; then
#             linux /boot/vmlinuz-x86_64 misobasedir=manjaro misolabel=BIGLINUXLIVE driver=nonfree nouveau.modeset=0 i915.modeset=1 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash
#             initrd /boot/amd_ucode.img /boot/intel_ucode.img /boot/initramfs-@ARCH@.img
#                else
#             linux /boot/vmlinuz-x86_64 misobasedir=$exe_option_mode
#                fi
#         fi
#     fi

    ##DEBUG            
    echo "Gráfico: ${graphics_mode}"
    echo "Drive: ${drive_mode}"    
    echo "Avançado: ${option_mode}"

    if [ "$option_mode" = "none" ]; then
        echo "ENTROU Avançado: ${option_mode}"
    else
        echo "NAO ENTROU Avançado: ${option_mode}"
    fi
    
    echo "Exec: ${exe_option_mode}"
    sleep 3

    linux /casper/vmlinuz boot=live graphics_mode=${graphics_mode} drive_mode=${drive_mode} quiet splash ---
    initrd /casper/initrd.lz
}
### Graphic Server
submenu "Graphic Server › ${txt_graphics_mode}" --class bios {
    menuentry "Wayland" --class=wayland {
        set txt_graphics_mode=Wayland
        export txt_graphics_mode
        save_env txt_graphics_mode
    
        set graphics_mode=wayland
        export graphics_mode
        save_env graphics_mode
        custom_start #Carregar Start com Custom
        advanced_reset #Resetar Opçoes Avançadas
        # Recarrega a configuração principal para aplicar a mudança
        configfile ($root)/boot/grub/grub.cfg
    }
    menuentry "XOrg" --class=xorg {
        set txt_graphics_mode=XOrg
        export txt_graphics_mode
        save_env txt_graphics_mode
        
        set graphics_mode=xorg
        export graphics_mode
        save_env graphics_mode
        custom_start #Carregar Start com Custom
        advanced_reset #Resetar Opçoes Avançadas
        configfile ($root)/boot/grub/grub.cfg
    }
    menuentry "Return to main menu" --class=return-main {
        configfile ($root)/boot/grub/grub.cfg
    }
}

### Drivers
submenu "Drivers › ${txt_drive_mode}" --class drivers {
    menuentry "Proprietary (Modern Nvidia, Broadcom wl:r8168/rt3562sta)" --class proprietary-drivers {
        set txt_drive_mode="Proprietary (Modern Nvidia, Broadcom wl:r8168/rt3562sta)"       
        set drive_mode=proprietary-drivers

        export txt_drive_mode
        save_env txt_drive_mode
        export drive_mode
        save_env drive_mode
        
        custom_start #Carregar Start com Custom
        advanced_reset #Resetar Opçoes Avançadas
        
        configfile ($root)/boot/grub/grub.cfg
    }
    menuentry "Open Source (AMD, Intel, Legacy Nvidia)" --class opensource-drivers {
        set txt_drive_mode="Open Source (AMD, Intel, Legacy Nvidia)"
        set drive_mode=opensource-drivers
        
        export txt_drive_mode
        save_env txt_drive_mode
        export drive_mode
        save_env drive_mode
        
        custom_start #Carregar Start com Custom
        advanced_reset #Resetar Opçoes Avançadas
        configfile ($root)/boot/grub/grub.cfg
    }
    menuentry "Return to main menu" --class=return-main {
        configfile ($root)/boot/grub/grub.cfg
    }
}

##Advanced Options
if [ "$graphics_mode" = "wayland" ]; then
    if [ "$drive_mode" = "opensource-drivers" ]; then
##Wayland
##Open Source    
        submenu "Advanced Options › ${txt_option_mode}" --class advanced-options {
            menuentry "1.0 Open in Installer" --class advanced-options {
                set txt_option_mode="1.0 Open in Installer"
                set option_mode=wayland-opensource-option-1-0
                set exe_option_mode="manjaro misolabel=BIGLINUXLIVE wayland driver=free nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash biglinux.bootcmd=only-calamares"
                
                export option_mode
                save_env option_mode               
                export txt_option_mode
                save_env txt_option_mode
                export exe_option_mode
                save_env exe_option_mode
                
                custom_start #Carregar Start com Custom               
                configfile ($root)/boot/grub/grub.cfg
            }
            menuentry "1.1 Open in Plasma" --class advanced-options {
                set txt_option_mode="1.1 Open in Plasma"
                set option_mode=wayland-opensource-option-1-1
                set exe_option_mode="manjaro misolabel=BIGLINUXLIVE wayland driver=free nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash biglinux.bootcmd=boot-in-plasma"
                
                export exe_option_mode
                save_env exe_option_mode               
                export txt_option_mode
                save_env txt_option_mode
                export exe_option_mode
                save_env exe_option_mode
                
                custom_start #Carregar Start com Custom               
                configfile ($root)/boot/grub/grub.cfg
            }
            menuentry "Return to main menu" --class=return-main {
                configfile ($root)/boot/grub/grub.cfg
            }
        }
    else
##Wayland
##Proprietary    
        submenu "Advanced Options › ${txt_option_mode}" --class advanced-options {
            submenu "1.0 Options to Hybrid GPU › " --class advanced-options {
                menuentry "1.0.1 Intel as Primary + Nvidia ModeSetting - PAT" --class advanced-options {               
                    set txt_option_mode="1.0.1 Intel as Primary + Nvidia ModeSetting - PAT"
                    set option_mode=wayland-proprietary-option-1-0-1
                    set exe_option_mode="manjaro misolabel=BIGLINUXLIVE wayland driver=nonfree nouveau.modeset=0 nvidia-drm.modeset=1 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash bignvidia=1"
                    
                    export exe_option_mode
                    save_env exe_option_mode
                    export txt_option_mode
                    save_env txt_option_mode
                    export option_mode
                    save_env option_mode
                    
                    custom_start #Carregar Start com Custom
                    configfile ($root)/boot/grub/grub.cfg
                }
                menuentry "1.0.2 Intel as Primary + Nvidia ModeSetting + PAT" --class advanced-options {               
                    set txt_option_mode="1.0.2 Intel as Primary + Nvidia ModeSetting + PAT"
                    set option_mode=wayland-proprietary-option-1-0-2
                    set exe_option_mode="manjaro misolabel=BIGLINUXLIVE wayland driver=nonfree nouveau.modeset=0 nvidia-drm.modeset=1 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash bignvidia=2"
                    
                    export exe_option_mode
                    save_env exe_option_mode
                    export txt_option_mode
                    save_env txt_option_mode
                    export option_mode
                    save_env option_mode
                    
                    custom_start #Carregar Start com Custom
                    configfile ($root)/boot/grub/grub.cfg
                }
            }
            menuentry "1.1 Open in Installer" --class advanced-options {               
                set txt_option_mode="1.1 Open in Installer"               
                set option_mode=wayland-proprietary-option-1-1
                set exe_option_mode="manjaro misolabel=BIGLINUXLIVE wayland driver=nonfree nouveau.modeset=0 i915.modeset=1 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash biglinux.bootcmd=only-calamares"
                    
                export exe_option_mode
                save_env exe_option_mode
                export txt_option_mode
                save_env txt_option_mode
                export option_mode
                save_env option_mode
                
                custom_start #Carregar Start com Custom
                configfile ($root)/boot/grub/grub.cfg
            }
            menuentry "1.2 Open in Plasma" --class advanced-options {               
                set txt_option_mode="1.2 Open in Plasma"
                set option_mode=wayland-proprietary-option-1-2
                set exe_option_mode="manjaro misolabel=BIGLINUXLIVE wayland driver=nonfree nouveau.modeset=0 i915.modeset=1 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash biglinux.bootcmd=boot-in-plasma"
                    
                export exe_option_mode
                save_env exe_option_mode
                export txt_option_mode
                save_env txt_option_mode
                export option_mode
                save_env option_mode
                
                custom_start #Carregar Start com Custom
                configfile ($root)/boot/grub/grub.cfg
            }
            menuentry "Return to main menu" --class=return-main {
                configfile ($root)/boot/grub/grub.cfg
            }
        }
    fi
else
    if [ "$drive_mode" = "opensource-drivers" ]; then
##XOrg
##Open Source     
        submenu "Advanced Options › ${txt_option_mode}" --class advanced-options {
            menuentry "2.0 Open in Installer" --class advanced-options {
                set txt_option_mode="2.0 Open in Installer"
                set option_mode=xorg-opensource-option-2-0
                set exe_option_mode="manjaro misolabel=BIGLINUXLIVE driver=free nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash biglinux.bootcmd=only-calamares"

                export exe_option_mode
                save_env exe_option_mode
                export txt_option_mode
                save_env txt_option_mode
                export option_mode
                save_env option_mode
                
                custom_start #Carregar Start com Custom
                configfile ($root)/boot/grub/grub.cfg
            }
            menuentry "2.1 Open in Plasma" --class advanced-options {
                set txt_option_mode="2.1 Open in Plasma"
                set option_mode=xorg-opensource-option-2-1
                set exe_option_mode="manjaro misolabel=BIGLINUXLIVE driver=free nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash biglinux.bootcmd=boot-in-plasma"

                export exe_option_mode
                save_env exe_option_mode
                export txt_option_mode
                save_env txt_option_mode
                export option_mode
                save_env option_mode
                
                custom_start #Carregar Start com Custom
                configfile ($root)/boot/grub/grub.cfg
            }
            menuentry "Return to main menu" --class=return-main {
                configfile ($root)/boot/grub/grub.cfg
            }
        }
    else
##XOrg
##Proprietary     
        submenu "Advanced Options › ${txt_option_mode}" --class advanced-options {
            submenu "2.0 Options to Hybrid GPU › " --class advanced-options {
                menuentry "2.0.1 Intel Xorg as Primary + Nvidia ModeSetting - PAT" --class advanced-options {
                    set txt_option_mode="2.0.1 Intel Xorg as Primary + Nvidia ModeSetting - PAT"
                    set option_mode=xorg-proprietary-option-2-0-1
                    set exe_option_mode="manjaro misolabel=BIGLINUXLIVE driver=nonfree nouveau.modeset=0 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash bignvidia=1"

                    export exe_option_mode
                    save_env exe_option_mode
                    export txt_option_mode
                    save_env txt_option_mode
                    export option_mode
                    save_env option_mode
                    
                    custom_start #Carregar Start com Custom
                    configfile ($root)/boot/grub/grub.cfg
                }
                menuentry "2.0.2 Intel Xorg as Primary + Nvidia ModeSetting + PAT" --class advanced-options {
                    set txt_option_mode="2.0.2 Intel Xorg as Primary + Nvidia ModeSetting + PAT"
                    set option_mode=xorg-proprietary-option-2-0-2
                    set exe_option_mode="manjaro misolabel=BIGLINUXLIVE driver=nonfree nouveau.modeset=0 nvidia-drm.modeset=1 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash bignvidia=2"

                    export exe_option_mode
                    save_env exe_option_mode
                    export txt_option_mode
                    save_env txt_option_mode
                    export option_mode
                    save_env option_mode
                    
                    custom_start #Carregar Start com Custom
                    configfile ($root)/boot/grub/grub.cfg
                }                
            }
            menuentry "2.1 Open in Installer" --class advanced-options {
                set txt_option_mode="2.1 Open in Installer"
                set option_mode=xorg-proprietary-option-2-1
                set exe_option_mode="manjaro misolabel=BIGLINUXLIVE driver=nonfree nouveau.modeset=0 i915.modeset=1 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash biglinux.bootcmd=only-calamares"

                export exe_option_mode
                save_env exe_option_mode
                export txt_option_mode
                save_env txt_option_mode
                export option_mode
                save_env option_mode
                
                custom_start #Carregar Start com Custom
                configfile ($root)/boot/grub/grub.cfg
            }
            menuentry "2.2 Open in Plasma" --class advanced-options {
                set txt_option_mode="2.2 Open in Plasma"
                set option_mode=xorg-proprietary-option-2-2
                set exe_option_mode="manjaro misolabel=BIGLINUXLIVE driver=nonfree nouveau.modeset=0 i915.modeset=1 radeon.modeset=1 nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 rw nosoftlockup audit=0 nomce skew_tick=1 intremap=off split_lock_detect=off clearcpuid=514 quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 splash biglinux.bootcmd=boot-in-plasma"

                export exe_option_mode
                save_env exe_option_mode
                export txt_option_mode
                save_env txt_option_mode
                export option_mode
                save_env option_mode
                
                custom_start #Carregar Start com Custom
                configfile ($root)/boot/grub/grub.cfg
            }

            menuentry "Return to main menu" --class=return-main {
                configfile ($root)/boot/grub/grub.cfg
            }
        }
    fi
fi

# Tools Menu (tools_menu.cfg)
submenu "Tools" --class tools-menu {
    if ! is_efi; then
        if [ -f /boot/memtest ]; then
            menuentry "Run Memory Testing Tool (memtest86+)" --class memtest86 --class gnu --class tool {
                linux16 /boot/memtest
            }
        fi
    elif is_efi; then
        if [ -f /boot/memtest-efi ]; then
            menuentry "Run Memory Testing Tool (memtest86+)" --class memtest86 --class gnu --class tool {
                linux16 /boot/memtest-efi
            }
        fi
    fi
   
    if is_efi; then
        menuentry "UEFI Firmware" --class bios {
            fwsetup
        }    
    fi
    
    if is_efi ; then
        submenu --class=find.efi --hotkey=f "Detect EFI bootloaders" {
            efi_found=false

            for efi in (*,gpt*)/efi/*/*.efi (*,gpt*)/efi/*/*/*.efi (*,gpt*)/*.efi (*,gpt*)/*/*.efi ; do
                regexp --set=1:efi_device '^\((.*)\)/' "${efi}"
                if [ -e "${efi}" ]; then
                    efi_found=true

                    menuentry --class=efi "${efi}" "${efi_device}" {
                        root="${2}"
                        chainloader "${1}"
                    }
                fi
            done

            if [ "${efi_found}" != true ]; then
                menuentry --hotkey=q --class=find.none "No EFI files detected." { menu_reload }
            else
                menuentry --hotkey=q --class=cancel "Cancel" { menu_reload }
            fi
        }
    fi    

    menuentry "Reset defaults" --class=reset-default {
        reset_defaults
    }
    
    menuentry "Restart computer" --class=reboot {
        reboot
    }
    
    menuentry "Return to main menu" --class=return-main {
        configfile ($root)/boot/grub/grub.cfg
    }
}
